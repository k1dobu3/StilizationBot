from aiogram import *
import logging

from config import token

logging.basicConfig(level=logging.INFO)
bot = Bot(token=token)
dp = Dispatcher(bot)

# Menu buttons
menu_keyboard = types.ReplyKeyboardMarkup(row_width=1)
btn_nav1 = types.KeyboardButton(text='–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É üì∏')
btn_nav2 = types.KeyboardButton(text='–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç üí∏')
btn_nav3 = types.KeyboardButton(text='–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏ üë•')
menu_keyboard.add(btn_nav1, btn_nav2, btn_nav3)

# Style buttons
style_keyboard = types.ReplyKeyboardMarkup(row_width=2)
btn_art1 = types.KeyboardButton(text='–ö–∞–Ω–¥–∏–Ω—Å–∫–∏–π')
btn_art2 = types.KeyboardButton(text='–ú–æ–Ω–µ—Ç')
btn_art3 = types.KeyboardButton(text='–í–∞–Ω-–ì–æ–≥')
btn_art4 = types.KeyboardButton(text='–ü–µ—Ä—Å–æ–Ω–∞–∂ –î–∏—Å–Ω–µ–π')
btn_menu = types.InlineKeyboardButton(text='–ú–µ–Ω—é –±–æ—Ç–∞ üìî')
style_keyboard.add(btn_art1, btn_art2, btn_art3, btn_art4, btn_menu)


@dp.message_handler(commands=['start', 'help'])
async def send_welcome(message: types.Message):
    await message.reply("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π!\n–Ø PhotoSet –ë–æ—Ç!\n–î–∞–≤–∞–π —Å–¥–µ–ª–∞–µ–º –≤–∞—à—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–π")
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –ø–∏—Å–∞—Ç–µ–ª—è –ø–æ–¥ –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é:", reply_markup=style_keyboard)


@dp.message_handler(commands=['menu'])
async def send_menubar(message: types.Message):
    await message.reply("–ú–µ–Ω—é –±–æ—Ç–∞:", reply_markup=menu_keyboard)


@dp.message_handler(content_types="text")
async def echo(message: types.Message):
    if message.text == '–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏ üë•':
        url_keyboard = types.InlineKeyboardMarkup(row_width=1)
        btn_url1 = types.InlineKeyboardButton(text='GitHub', url='https://github.com/k1dobu3')
        url_keyboard.add(btn_url1)
        await message.reply('–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏:\n<b>–ì–æ—Ä–¥–∏–µ–Ω–∫–æ –ö–∏—Ä–∏–ª–ª</b>\n<b>–ö—Ä—ã–ª–æ—Å–æ–≤ –ò–≥–æ—Ä—å</b>\n<b>–ü—è—Ç–∞–∫–æ–≤ –î–º–∏—Ç—Ä–∏–π</b>\n\n–ù–∞—à –ø—Ä–æ–µ–∫—Ç –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö:', reply_markup=url_keyboard, parse_mode='html')
    elif message.text == '–ú–µ–Ω—é –±–æ—Ç–∞ üìî':
        await message.answer("–ú–µ–Ω—é –±–æ—Ç–∞:", reply_markup=menu_keyboard)
    elif message.text == '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É üì∏':
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –ø–∏—Å–∞—Ç–µ–ª—è –ø–æ–¥ –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é:",
                             reply_markup=style_keyboard)
    elif message.text == '–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç üí∏':
        await message.answer("–ü–æ—Ç–æ–º —Ç—É—Ç –±—É–¥–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –Ω–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞, –∞ –ø–æ–∫–∞ –Ω–∞–∑–∞–¥ –≤ –º–µ–Ω—é", reply_markup=style_keyboard)
    else:
        await message.answer(message.text)

# –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ü–∏–∫–ª –¥–ª—è –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–π —Ä–∞–±–æ—Ç—ã
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
