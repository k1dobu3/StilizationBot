from aiogram import *
import logging
import os

import stilization
from config import token
from stilization import *
# import weather
# import googlepict


logging.basicConfig(level=logging.INFO)
bot = Bot(token=token)
dp = Dispatcher(bot)

# Menu buttons
menu_keyboard = types.ReplyKeyboardMarkup(row_width=1)
btn_nav1 = types.KeyboardButton(text='–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É üì∏')
btn_nav2 = types.KeyboardButton(text='–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç üí∏')
btn_nav3 = types.KeyboardButton(text='–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏ üë•')
menu_keyboard.add(btn_nav1, btn_nav2, btn_nav3)

# Only Start buttons

start_keyboard = types.ReplyKeyboardMarkup(row_width=1)
start_keyboard.add(btn_nav1)

# Style buttons
style_keyboard = types.ReplyKeyboardMarkup(row_width=2)
btn_menu = types.InlineKeyboardButton(text='–ú–µ–Ω—é –±–æ—Ç–∞ üìî')
style_keyboard.add(btn_menu)


@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    await message.reply(
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π!\n–Ø PhotoSet –ë–æ—Ç!\n–î–∞–≤–∞–π —Å–¥–µ–ª–∞–µ–º –≤–∞—à—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–π\n\n–û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ —Å –æ–¥–Ω–æ–π –∏–∑ —Ü–∏—Ñ—Ä:\n1-–ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç—å —Ñ–æ—Ç–æ\n2-–º–æ–Ω–æ—Ö—Ä–æ–º\n3-–æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–Ω—Ç—É—Ä—ã",
        reply_markup=style_keyboard)


@dp.message_handler(commands=['menu'])
async def send_menubar(message: types.Message):
    await message.reply("–ú–µ–Ω—é –±–æ—Ç–∞:", reply_markup=menu_keyboard)


# 4 –õ–∞–±–∞ –ø–æ WEB
@dp.message_handler(commands=['help'])
async def send_helpmenu(message: types.Message):
    await message.answer(
        "–†–∞–±–æ—á–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n\n/start - –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã\n/menu - –º–µ–Ω—é –±–æ—Ç–∞",
        reply_markup=start_keyboard)


# @dp.message_handler(commands=['weather'])
# async def get_localweather(message: types.Message):
#     ourcity_weather = weather.get_wether('Rostov-on-Don')
#     await message.reply(
#         f"–ü–æ–≥–æ–¥–∞ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –≥–æ—Ä–æ–¥–µ: {ourcity_weather[0][0]}\n\n–°–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ–±–∞: {ourcity_weather[1]}\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {ourcity_weather[2]}‚ÑÉ")
#
#
# @dp.message_handler(commands=['animals'])
# async def get_randomanimal(message: types.Message):
#     await message.answer(
#         f"–ù–∞–ø–∏—à–∏:\n<b>–ö–æ—Ç–∏–∫</b> –¥–ª—è –ø–æ–∏—Å–∫–æ–≤ –∫–æ—Ç–∏–∫–æ–≤\n<b>–õ–∏—Å–∏—á–∫</b> –¥–ª—è –ø–æ–∏—Å–∫–æ–≤ –ª–∏—Å–∏—á–µ–∫\n<b>–ï–Ω–æ—Ç–∏–∫</b> –¥–ª—è –ø–æ–∏—Å–∫–æ–≤ –µ–Ω–æ—Ç–æ–≤\n<b>Supra</b> –¥–ª—è –ø–æ–∏—Å–∫–æ–≤ –∫–æ—à–µ—á–∫–∏, —Ö–µ-—Ö–µ",
#         parse_mode='html')


@dp.message_handler(content_types=["photo"])
async def get_photoandtext(message):
    file_info = await bot.get_file(message.photo[-1].file_id)
    user_decide = message.caption
    print(user_decide)
    photo_pathname = file_info.file_path.split('photos/')[1]
    await message.photo[-1].download(destination_file=photo_pathname)
    if user_decide == '1':
        fucn_answer = stilization.pict_rotate(photo_pathname)
        photo = open(f'{photo_pathname}', 'rb')
        if fucn_answer: await message.answer_photo(photo)
        os.remove(f"{photo_pathname}")
    elif user_decide == '2':
        fucn_answer = stilization.pict_mohohrom(photo_pathname)
        photo = open(f'{photo_pathname}', 'rb')
        if fucn_answer: await message.answer_photo(photo)
        os.remove(f"{photo_pathname}")
    elif user_decide == '3':
        fucn_answer = stilization.pict_contour(photo_pathname)
        photo = open(f'{photo_pathname}', 'rb')
        if fucn_answer: await message.answer_photo(photo)
        os.remove(f"{photo_pathname}")
    else:
        print("PASS")
    await message.answer('VOT')


@dp.message_handler(content_types=["document"])
async def get_document_set_philter(message):
    await message.answer('–ü–æ–ª—É—á–∏–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ò–¥–µ—Ç –æ–±—Ä–æ–±–æ—Ç–∫–∞....')


@dp.message_handler(content_types="text")
async def echo(message: types.Message):
    if message.text == '–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏ üë•':
        url_keyboard = types.InlineKeyboardMarkup(row_width=1)
        btn_url1 = types.InlineKeyboardButton(text='GitHub', url='https://github.com/k1dobu3/StilizationBot')
        url_keyboard.add(btn_url1)
        await message.reply(
            '–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏:\n<b>–ì–æ—Ä–¥–∏–µ–Ω–∫–æ –ö–∏—Ä–∏–ª–ª</b>\n<b>–ö—Ä—ã–ª–æ—Å–æ–≤ –ò–≥–æ—Ä—å</b>\n<b>–ü—è—Ç–∞–∫–æ–≤ –î–º–∏—Ç—Ä–∏–π</b>\n\n–ù–∞—à –ø—Ä–æ–µ–∫—Ç –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö:',
            reply_markup=url_keyboard, parse_mode='html')
    elif message.text == '–ú–µ–Ω—é –±–æ—Ç–∞ üìî':
        await message.answer("–ú–µ–Ω—é –±–æ—Ç–∞:", reply_markup=menu_keyboard)
    elif message.text == '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É üì∏':
        await message.reply("–û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ —Å –æ–¥–Ω–æ–π –∏–∑ —Ü–∏—Ñ—Ä:\n1-–ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç—å —Ñ–æ—Ç–æ\n2-–º–æ–Ω–æ—Ö—Ä–æ–º\n3-—Å—Ç–∏–ª—å –í–∞–Ω –ì–æ–≥–∞(–∫–æ–Ω—Ç—É—Ä—ã)", reply_markup=style_keyboard)
    elif message.text == '–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç üí∏':
        await message.answer("–ü–æ—Ç–æ–º —Ç—É—Ç –±—É–¥–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –Ω–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞, –∞ –ø–æ–∫–∞ –Ω–∞–∑–∞–¥ –≤ –º–µ–Ω—é",
                             reply_markup=style_keyboard)
    # elif message.text == '–ö–æ—Ç–∏–∫' or '–õ–∏—Å–∏—á–∫' or '–ï–Ω–æ—Ç–∏–∫' or 'Supra':
    #     await message.answer(f"–í–æ—Ç –≤–∞—à {message.text}:")
    #     await message.answer("PLS ONE SECOND")
    #     google_answer1 = googlepict.get_googlepicturl(message.text)
    #     google_answer2 = googlepict.get_googlepicturl(message.text)
    #     google_answer3 = googlepict.get_googlepicturl(message.text)
    #     media = types.MediaGroup()
    #     media.attach_photo(f'{google_answer1}')
    #     print(1)
    #     media.attach_photo(f'{google_answer2}')
    #     media.attach_photo(f'{google_answer3}')
    #     await bot.send_media_group(message.chat.id, media=media)
    else:
        await message.answer(message.text)


# –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ü–∏–∫–ª –¥–ª—è –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–π —Ä–∞–±–æ—Ç—ã
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
